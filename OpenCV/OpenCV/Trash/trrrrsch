
    """ key = cv2.waitKey(1)
    if key == ord('q'):
            ipi.aruco_calibration(frame)
            frame = ipi.warp(frame)
            ipi.save_settings()
    if key == ord('w'):
            ipi.warp(frame)
    if key == ord('c'):
            calib_list.append(frame.copy())
            print(len(calib_list))
            #ipi.chessboard_calibration(frame)
    if key == ord('b'):
            calib_list.clear()
    if key == ord('v'):
            ipi.chessboard_calibration(calib_list)
    if key == ord('p'):
        Vis_RED.Find_contors(frame, RED_COLOR.lower, RED_COLOR.upper)
        Vis_RED.Find_Rocks(frame)
        print("RED")
        print(Vis_RED.track_ROCKS)  """

""" while True:
       
    key = cv2.waitKey(1)
    if key == ord('q'):
        ipi.aruco_calibration(frame)
        frame = ipi.warp(frame)
        ipi.save_settings()
        break
    if key == ord('c'):
        calib_list.append(frame.copy())
        print(len(calib_list))
    if key == ord('b'):
        calib_list.clear() """





""" Red_scope.point = 0
                Blue_scope.point = 0 """

                """ data = pos_transformation(x_table, y_table, pixel_coord[0], 
                                            pixel_coord[1], pixel_coord[2], ln, BLUE_COORD_2, RED_COORD_2) """

                """ target = brain (data) 
                robot.send_step(target)
            
                
                RED_COORD = []

                for color_piptic in data:
                    VR_BLUE_COORD = []
                    VR_RED_COORD = []
                    if color_piptic[0] == 2:
                        VR_RED_COORD.append(color_piptic[1])
                        VR_RED_COORD.append(color_piptic[2])
                        RED_COORD.append(VR_RED_COORD)
                    else:
                        VR_BLUE_COORD.append(color_piptic[1])
                        VR_BLUE_COORD.append(color_piptic[2])
                        BLUE_COORD.append(VR_BLUE_COORD)
                

                if type(RED_COORD) == int:
                    print(Red_scope.point)
                else:
                    print(Red_scope.point)
                    for quantity in range (len(RED_COORD)):                                           # ВНИМАНИЕ!!!!!! КОСТЫЛЬ РАЗМЕРОМ С МЛЕЧНЫЙ ПУТЬ!!!!!!! 
                        Red_scope.Which_field(Red_scope.iteration_of_piptics(RED_COORD, quantity))
                #print(Red_scope.point)

                if type(BLUE_COORD) == int:
                    print(Blue_scope.point)
                else:
                    print(Blue_scope.point)
                    for quantity in range (len(BLUE_COORD)):                                           # ВНИМАНИЕ!!!!!! КОСТЫЛЬ РАЗМЕРОМ С МЛЕЧНЫЙ ПУТЬ!!!!!!! 
                        Blue_scope.Which_field(Blue_scope.iteration_of_piptics(BLUE_COORD, quantity))

                draw_plt(data, target)  """